"讲" = "jiang 'say' (B)",
"想" = "xiang 'think, want' (B, D)",
"知道" = "zhidao 'know' (B)",
"叫" = "jiao 'call/get' (D)",
"喜欢" = "xihuan 'like' (D)",
"告诉" = "gaosu 'tell' (B)",
"帮" = "bang 'help' (O)",
"让" = "rang 'let' (O)",
"觉得" = "juede 'feel' (B)",
"want" = "want (D)",
"see" = "see (B)",
"know" = "know (B)",
"think" = "think (B)",
"say" = "say (B)",
"like" = "like (D)",
"tell" = "tell (B/D)",
"try" = "try (D)",
"need" = "need (D)",
"remember" = "remember (B)"
)
#tikz('~/experiments/MainClauseModel/bin/embclause_prob.tikz', width=5.5, height=4)
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang 'help'" & verb != "rang 'let'"
& verb != "kankan 'see-DUP'"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
# Bar plot version
ggplot(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help'" & verb != "rang\n'let'"
& verb != "kankan\n'see-DUP'"
), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
ggplot(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help'" & verb != "rang\n'let'"
& verb != "kankan\n'see-DUP'"
), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
repmeans.emb.cast$verb <- recode(repmeans.emb.cast$verb,
DECLARATIVE = "DECLARATIVE",
IMPERATIVE = "IMPERATIVE",
"要" = "yao 'want' (D)",
"看" = "kan 'see' (B)",
"说" = "shuo 'say' (B)",
"看看" = "kankan 'see-DUP' (B)",
"讲" = "jiang 'say' (B)",
"想" = "xiang 'think, want' (B, D)",
"知道" = "zhidao 'know' (B)",
"叫" = "jiao 'call/get' (D)",
"喜欢" = "xihuan 'like' (D)",
"告诉" = "gaosu 'tell' (B)",
"帮" = "bang 'help' (O)",
"让" = "rang 'let' (O)",
"觉得" = "juede 'feel' (B)",
"want" = "want (D)",
"see" = "see (B)",
"know" = "know (B)",
"think" = "think (B)",
"say" = "say (B)",
"like" = "like (D)",
"tell" = "tell (B/D)",
"try" = "try (D)",
"need" = "need (D)",
"remember" = "remember (B)"
)
# Bar plot version
ggplot(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help'" & verb != "rang\n'let'"
& verb != "kankan\n'see-DUP'"
), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
### PART TWO: Probability of semantics vs. frequency of clausal complements
gleason_data$has.embpred <- gleason_data$embpred!='NONE' # English
gleason_data$has.embpred <- gleason_data$embpred!='FALSE' # MC
emb.counts <- filter(gleason_data, verb %in% unique(repmeans.summ$verb)) %>%
count(child, verb, has.embpred) %>% group_by(child, verb) %>% mutate(tot=sum(n), prop=n/tot)
repmeans.emb <- merge(filter(repmeans.melt, repmeans.melt$sentence==max(repmeans.melt$sentence)),
emb.counts)
repmeans.emb$verb <- ordered(repmeans.emb$verb, levels=verb.counts$verb)
repmeans.emb.cast <- dcast(filter(repmeans.emb, has.embpred), child+verb+prop ~ variable, value.var = 'value')
repmeans.emb.cast$dorb <- 1-(1-repmeans.emb.cast$belief)*(1-repmeans.emb.cast$desire)
logistic <- function(p) log(p)-log(1-p)
repmeans.emb.cast$verb <- recode(repmeans.emb.cast$verb,
DECLARATIVE = "DECLARATIVE",
IMPERATIVE = "IMPERATIVE",
"要" = "yao\n'want' (D)",
"看" = "kan\n'see' (B)",
"说" = "shuo\n'say' (B)",
"看看" = "kankan\n'see-DUP' (B)",
"讲" = "jiang\n'say' (B)",
"想" = "xiang\n'think, want' (B, D)",
"知道" = "zhidao\n'know' (B)",
"叫" = "jiao\n'call/get' (D)",
"喜欢" = "xihuan\n'like' (D)",
"告诉" = "gaosu\n'tell' (B)",
"帮" = "bang\n'help' (O)",
"让" = "rang\n'let' (O)",
"觉得" = "juede\n'feel' (B)",
"want" = "want (D)",
"see" = "see (B)",
"know" = "know (B)",
"think" = "think (B)",
"say" = "say (B)",
"like" = "like (D)",
"tell" = "tell (B/D)",
"try" = "try (D)",
"need" = "need (D)",
"remember" = "remember (B)"
)
# Bar plot version
ggplot(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help'" & verb != "rang\n'let'"
& verb != "kankan\n'see-DUP'"
), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
# Bar plot version
ggplot(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help' (O)" & verb != "rang\n'let' (O)"
& verb != "kankan\n'see-DUP' (O)"
), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
# Bar plot version
ggplot(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help' (O)" & verb != "rang\n'let' (O)"
& verb != "kankan\n'see-DUP' (B)"
), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
ggplot(filter(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang 'help'" & verb != "rang 'let'"
& verb != "kankan 'see-DUP'"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang 'help'" & verb != "rang 'let'"
& verb != "kankan 'see-DUP'"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
ggplot(filter(repmeans.emb.cast %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang 'help'" & verb != "rang 'let'"
& verb != "kankan 'see-DUP'"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
View(repmeans.emb)
View(repmeans.emb)
View(repmeans.emb.cast)
repmeans.emb$verb <- recode(repmeans.emb$verb,
DECLARATIVE = "DECLARATIVE",
IMPERATIVE = "IMPERATIVE",
"要" = "yao\n'want' (D)",
"看" = "kan\n'see' (B)",
"说" = "shuo\n'say' (B)",
"看看" = "kankan\n'see-DUP' (B)",
"讲" = "jiang\n'say' (B)",
"想" = "xiang\n'think, want' (B, D)",
"知道" = "zhidao\n'know' (B)",
"叫" = "jiao\n'call/get' (D)",
"喜欢" = "xihuan\n'like' (D)",
"告诉" = "gaosu\n'tell' (B)",
"帮" = "bang\n'help' (O)",
"让" = "rang\n'let' (O)",
"觉得" = "juede\n'feel' (B)",
"want" = "want (D)",
"see" = "see (B)",
"know" = "know (B)",
"think" = "think (B)",
"say" = "say (B)",
"like" = "like (D)",
"tell" = "tell (B/D)",
"try" = "try (D)",
"need" = "need (D)",
"remember" = "remember (B)"
)
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang 'help'" & verb != "rang 'let'"
& verb != "kankan 'see-DUP'"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help' (O)" & verb != "rang 'let' (O)"
& verb != "kankan\n'see-DUP' (B)"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help' (O)" & verb != "rang\n'let' (O)"
& verb != "kankan\n'see-DUP' (B)"
), has.embpred), aes(x=prop, y=logistic(value), color = variable)) +
geom_point(size=1.5) +
facet_wrap(~verb, ncol=5) +
scale_shape_manual(name='', values = c(16, 1)) +
labs(color='Semantic\nfeature') + # legend name
scale_x_log10(name='Proportion of sentences with embedded clause',
breaks = c(0, 0.1, 0.5, 1),
labels=c('~0', 0.1, 0.5, '~1'))+
scale_y_continuous(name='Probability of semantic component', breaks=logistic(c(0.0001, 0.1, 0.5, 0.9, 0.9999)), labels=c('~0', 0.1, 0.5, 0.9, '~1'))# +
#theme(axis.text.x=element_text(angle=45, hjust=1))
#dev.off()
View(repmeans.emb)
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help' (O)" & verb != "rang\n'let' (O)"
& verb != "kankan\n'see-DUP' (B)"
), has.embpred), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
View(repmeans.emb)
ggplot(filter(repmeans.emb %>%
filter(verb != "vacuous-verb"
& verb != "IMPERATIVE" & verb !="DECLARATIVE"
& verb != "bang\n'help' (O)" & verb != "rang\n'let' (O)"
& verb != "kankan\n'see-DUP' (B)"
) %>% filter(variable == 'belief'), has.embpred), aes(x=verb, y=prop)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +
scale_y_log10(name='Proportion of sentences with embedded clause',
breaks = c(0.001, 0.1, 0.25, 0.5, .9999),
labels = c('~0', 0.1, .25, .5, '~1')) +
xlab('Verb')
v2_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-2.csv", sep = "")) # no V2, as v1 has two itrs
v3_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-3.csv", sep = ""))
v4_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-4.csv", sep = ""))
v5_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-5.csv", sep = ""))
v6_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-6.csv", sep = ""))
v7_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-7.csv", sep = ""))
v8_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-8.csv", sep = ""))
v9_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-9.csv", sep = ""))
v0_mc_nopen <- read_csv(paste("results/verbreps_resultsmc 0-0.csv", sep = ""))
v2_mc_nopen$itr <- 2
v3_mc_nopen$itr <- 3
v4_mc_nopen$itr <- 4
v5_mc_nopen$itr <- 5
v6_mc_nopen$itr <- 6
v7_mc_nopen$itr <- 7
v8_mc_nopen$itr <- 8
v9_mc_nopen$itr <- 9
v0_mc_nopen$itr <- 0
verbreps_mc_results <- rbind(
read_csv(paste("results/verbreps_resultsmc 0-1.csv", sep = "")),
v2_mc_nopen, v3_mc_nopen, v4_mc_nopen, v5_mc_nopen, v6_mc_nopen, v7_mc_nopen, v8_mc_nopen, v9_mc_nopen, v0_mc_nopen
)
unique(verbreps_mc_results$itr)
v0_mc_nopen$itr <- 1
verbreps_mc_results <- rbind(
read_csv(paste("results/verbreps_resultsmc 0-1.csv", sep = "")),
v2_mc_nopen, v3_mc_nopen, v4_mc_nopen, v5_mc_nopen, v6_mc_nopen, v7_mc_nopen, v8_mc_nopen, v9_mc_nopen, v0_mc_nopen
)
unique(verbreps_mc_results$itr)
gleason_data <- read_csv("data/processedmc2may21.csv")
verbreps_mc_results <- verbreps_mc_results %>% filter(verb != "tell")
## END LOADING MANDARIN
# plot verb representations
repmeans <- group_by(verbreps_results, verb, sentence, child) %>%
summarise(belief=mean(`0`), desire=mean(`1`)) %>% filter(!((sentence%%10)>0))
repmeans.melt <- melt(repmeans, c('verb', 'sentence', 'child'))
repmeans.summ <- group_by(repmeans.melt, verb, variable, sentence) %>%
summarise(med=median(value), q25=quantile(value, .25), q75=quantile(value, .75),
q025=quantile(value, .025), q975=quantile(value, .975),
qmin=min(value), qmax=max(value))
verb.counts <- count(gleason_data, verb, sort = T)
verb.counts <- filter(verb.counts, verb %in% unique(repmeans.summ$verb))
repmeans.summ$verb <- ordered(repmeans.summ$verb, levels=verb.counts$verb)
repmeans.summ$verbPlot <- recode(repmeans.summ$verb,
DECLARATIVE = "DECLARATIVE",
IMPERATIVE = "IMPERATIVE",
"要" = "yao 'want' (D)",
"看" = "kan 'see' (B)",
"说" = "shuo 'say' (B)",
"看看" = "kankan 'see-DUP' (B)",
"讲" = "jiang 'say' (B)",
"想" = "xiang 'think, want' (B, D)",
"知道" = "zhidao 'know' (B)",
"叫" = "jiao 'call/get' (D)",
"喜欢" = "xihuan 'like' (D)",
"告诉" = "gaosu 'tell' (B)",
"帮" = "bang 'help' (O)",
"让" = "rang 'let' (O)",
"觉得" = "juede 'feel' (B)",
"want" = "want (D)",
"see" = "see (B)",
"know" = "know (B)",
"think" = "think (B)",
"say" = "say (B)",
"like" = "like (D)",
"tell" = "tell (B/D)",
"try" = "try (D)",
"need" = "need (D)",
"remember" = "remember (B)"
)
repmeans.summ <- repmeans.summ %>% filter(verbPlot != "<NA>")
#tikz('~/experiments/MainClauseModel/bin/verbrep_prob.tikz', width=5.5, height=4)
ggplot(repmeans.summ
%>% filter(verbPlot != "vacuous-verb"
#& verbPlot != "IMPERATIVE" & verbPlot !="DECLARATIVE"
& verbPlot != "bang 'help' (O)" & verbPlot != "rang 'let' (O)"
& verbPlot != "kankan 'see-DUP' (B)"
),
aes(x=(sentence+1)*10, y=med, color = variable, fill = variable )) + # linetype=variable,
geom_ribbon(aes(ymin=qmin, ymax=qmax), alpha = 0.1, color = NA) +
geom_ribbon(aes(ymin=q25, ymax=q75),  alpha = 0.3, color = NA) +
#geom_ribbon(alpha=.05, aes(ymin=q025, ymax=q975)) +
geom_line(size=1) + # color = black
facet_wrap(~verbPlot, ncol = 5) +
scale_linetype(name='') +
scale_x_continuous(name='Number of sentences seen (thousands)', breaks=c(0,10000,20000), labels=c('0', '10', '20')) +
scale_y_continuous(name='Probability of semantic component') +
scale_fill_hue(l=40) + # how light/dark the ribbon fill is
scale_color_hue(l=40) + # how light/dark the line is
theme(legend.title=element_blank()) # hide legend name
#dev.off()
verbreps_results <- verbreps_mc_results %>% filter(verb != "tell")
# plot verb representations
repmeans <- group_by(verbreps_results, verb, sentence, child) %>%
summarise(belief=mean(`0`), desire=mean(`1`)) %>% filter(!((sentence%%10)>0))
repmeans.melt <- melt(repmeans, c('verb', 'sentence', 'child'))
repmeans.summ <- group_by(repmeans.melt, verb, variable, sentence) %>%
summarise(med=median(value), q25=quantile(value, .25), q75=quantile(value, .75),
q025=quantile(value, .025), q975=quantile(value, .975),
qmin=min(value), qmax=max(value))
verb.counts <- count(gleason_data, verb, sort = T)
verb.counts <- filter(verb.counts, verb %in% unique(repmeans.summ$verb))
repmeans.summ$verb <- ordered(repmeans.summ$verb, levels=verb.counts$verb)
repmeans.summ$verbPlot <- recode(repmeans.summ$verb,
DECLARATIVE = "DECLARATIVE",
IMPERATIVE = "IMPERATIVE",
"要" = "yao 'want' (D)",
"看" = "kan 'see' (B)",
"说" = "shuo 'say' (B)",
"看看" = "kankan 'see-DUP' (B)",
"讲" = "jiang 'say' (B)",
"想" = "xiang 'think, want' (B, D)",
"知道" = "zhidao 'know' (B)",
"叫" = "jiao 'call/get' (D)",
"喜欢" = "xihuan 'like' (D)",
"告诉" = "gaosu 'tell' (B)",
"帮" = "bang 'help' (O)",
"让" = "rang 'let' (O)",
"觉得" = "juede 'feel' (B)",
"want" = "want (D)",
"see" = "see (B)",
"know" = "know (B)",
"think" = "think (B)",
"say" = "say (B)",
"like" = "like (D)",
"tell" = "tell (B/D)",
"try" = "try (D)",
"need" = "need (D)",
"remember" = "remember (B)"
)
repmeans.summ <- repmeans.summ %>% filter(verbPlot != "<NA>")
#tikz('~/experiments/MainClauseModel/bin/verbrep_prob.tikz', width=5.5, height=4)
ggplot(repmeans.summ
%>% filter(verbPlot != "vacuous-verb"
#& verbPlot != "IMPERATIVE" & verbPlot !="DECLARATIVE"
& verbPlot != "bang 'help' (O)" & verbPlot != "rang 'let' (O)"
& verbPlot != "kankan 'see-DUP' (B)"
),
aes(x=(sentence+1)*10, y=med, color = variable, fill = variable )) + # linetype=variable,
geom_ribbon(aes(ymin=qmin, ymax=qmax), alpha = 0.1, color = NA) +
geom_ribbon(aes(ymin=q25, ymax=q75),  alpha = 0.3, color = NA) +
#geom_ribbon(alpha=.05, aes(ymin=q025, ymax=q975)) +
geom_line(size=1) + # color = black
facet_wrap(~verbPlot, ncol = 5) +
scale_linetype(name='') +
scale_x_continuous(name='Number of sentences seen (thousands)', breaks=c(0,10000,20000), labels=c('0', '10', '20')) +
scale_y_continuous(name='Probability of semantic component') +
scale_fill_hue(l=40) + # how light/dark the ribbon fill is
scale_color_hue(l=40) + # how light/dark the line is
theme(legend.title=element_blank()) # hide legend name
#dev.off()
ggplot(repmeans.summ
%>% filter(verbPlot != "vacuous-verb"
& verbPlot != "IMPERATIVE" & verbPlot !="DECLARATIVE"
& verbPlot != "bang 'help' (O)" & verbPlot != "rang 'let' (O)"
& verbPlot != "kankan 'see-DUP' (B)"
),
aes(x=(sentence+1)*10, y=med, color = variable, fill = variable )) + # linetype=variable,
geom_ribbon(aes(ymin=qmin, ymax=qmax), alpha = 0.1, color = NA) +
geom_ribbon(aes(ymin=q25, ymax=q75),  alpha = 0.3, color = NA) +
#geom_ribbon(alpha=.05, aes(ymin=q025, ymax=q975)) +
geom_line(size=1) + # color = black
facet_wrap(~verbPlot, ncol = 5) +
scale_linetype(name='') +
scale_x_continuous(name='Number of sentences seen (thousands)', breaks=c(0,10000,20000), labels=c('0', '10', '20')) +
scale_y_continuous(name='Probability of semantic component') +
scale_fill_hue(l=40) + # how light/dark the ribbon fill is
scale_color_hue(l=40) + # how light/dark the line is
theme(legend.title=element_blank()) # hide legend name
#dev.off()
ggplot(repmeans.summ
%>% filter(verbPlot != "vacuous-verb"
& verbPlot != "IMPERATIVE" & verbPlot !="DECLARATIVE"
& verbPlot != "bang 'help' (O)" & verbPlot != "rang 'let' (O)"
& verbPlot != "kankan 'see-DUP' (B)"
),
aes(x=(sentence+1)*10, y=med, color = variable, fill = variable )) + # linetype=variable,
geom_ribbon(aes(ymin=qmin, ymax=qmax), alpha = 0.1, color = NA) +
geom_ribbon(aes(ymin=q25, ymax=q75),  alpha = 0.3, color = NA) +
#geom_ribbon(alpha=.05, aes(ymin=q025, ymax=q975)) +
geom_line(size=1) + # color = black
facet_wrap(~verbPlot, ncol = 5) +
scale_linetype(name='') +
scale_x_continuous(name='Number of sentences seen (thousands)', breaks=c(0,10000,20000), labels=c('0', '10', '20')) +
scale_y_continuous(name='Probability of semantic component') +
scale_fill_hue(l=40) + # how light/dark the ribbon fill is
scale_color_hue(l=40) + # how light/dark the line is
theme(legend.title=element_blank()) # hide legend name
#dev.off()
